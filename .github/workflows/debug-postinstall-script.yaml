name: Debug postinstall script
on:
  push:
    branches:
      - main
    tags-ignore:
      - "**"
  pull_request:
jobs:
  setup:
    if: |
      ! (
        contains(github.event.pull_request.labels.*.name, 'invalid')
        || contains(github.event.pull_request.labels.*.name, 'skip ci')
      )
    runs-on: ubuntu-latest
    env:
      repo-dirname: repo
      workspace-dirname: path/to/foo/bar
      artifact-name: debug-package@${{ github.event.number && format('pr-{0}', github.event.number) || github.sha }}
      archive-filename: debug-package.tar.zst
      tarball-name: foo.tgz
    outputs:
      workspace-dirname: ${{ env.workspace-dirname }}
      artifact-name: ${{ env.artifact-name }}
      archive-filename: ${{ env.archive-filename }}
      tarball-name: ${{ env.tarball-name }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: ./${{ env.repo-dirname }}

      - name: Setup debug package
        shell: bash
        run: |
          readonly root_path="$PWD"
          readonly debugger_package_path="${root_path}"'/${{ env.repo-dirname }}/postinstall-debug-package'
          readonly workspace_path="${root_path}"'/${{ env.workspace-dirname }}'

          (
            cd "${debugger_package_path}" && {
              npm pack
              mv ./*.tgz "${root_path}/${{ env.tarball-name }}"
            }
          )

          cp -r "${root_path}"'/${{ env.repo-dirname }}/.github' ./

          mkdir -p "${workspace_path}"
          {
            echo '{}' | jq '.scripts.postinstall = "node ./postinstall.js --type=Project"'
          } > "${workspace_path}/package.json"
          touch "${workspace_path}/yarn.lock"
          cp "${debugger_package_path}/postinstall.js" "${workspace_path}"

          echo '{}' > "${root_path}/package.json"

          find . -mindepth 1 -maxdepth 1 -type d -name '${{ env.repo-dirname }}' -prune -o -print0 \
            | xargs -0 tar -c --file './${{ env.archive-filename }}' --zstd --verbose
        # Note: Convert the debug package into a single archive file. This is for the following reasons:
        #       + Maintaining file permissions and case sensitive files
        #         see https://github.com/actions/upload-artifact/blob/v3.1.2/README.md#maintaining-file-permissions-and-case-sensitive-files
        #       + Reduce the number of API calls
        #         see https://github.com/actions/upload-artifact/blob/v3.1.2/README.md#too-many-uploads-resulting-in-429-responses

      - name: Upload debug package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifact-name }}
          path: ${{ env.archive-filename }}
          retention-days:
            1
            # The resulting artifact of the build is intended to be used in the next job.
            # There is no need to store them for long periods of time.

  debug-postinstall-script:
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        package-manager:
          # - npm@1.4.29  # Throws "Reference Error: primordials is not defined"
          # - npm@2.15.12 # Throws "peerinvalid The package ajv@6.12.6 does not satisfy its siblings' peerDependencies requirements!"
          # - npm@3.10.10 # Throws "cb.apply is not a function"
          # - npm@4.6.1   # Throws "cb.apply is not a function"
          # - npm@5.10.0  # Throws "cb.apply is not a function"
          - npm@6.14.18
          - npm@7.24.2
          - npm@8.19.4
          - npm@9.6.4
          - yarn@1.22.19
          - yarn@2.4.3
          - yarn@3.5.0
          - yarn@4.0.0-rc.42
          # - pnpm@1.43.1  # Throws "Internal Error: Cannot find module '.../bin/pnpm.js'"
          # - pnpm@2.25.7  # Throws "TypeError: cb.apply is not a function"
          # - pnpm@3.8.1   # Throws "EACCES: permission denied, mkdir '/usr/local/pnpm-global'"
          # - pnpm@4.14.4  # Throws "EACCES: permission denied, mkdir '/usr/local/pnpm-global'"
          # - pnpm@5.18.10 # Throws "EACCES: permission denied, mkdir '/usr/local/pnpm-global'"
          # - pnpm@6.35.1  # Throws "ELIFECYCLEâ€‰ Command failed with exit code -4058. .../node_modules/foo postinstall: Failed"
          - pnpm@7.32.0
          - pnpm@8.2.0
          - bun@0.5.9
        exclude:
          - package-manager: bun@0.5.9
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download debug package
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.setup.outputs.artifact-name }}
          path: ~/debug-package-artifact

      - name: Restore debug package
        shell: bash
        run: tar -x --file ~/debug-package-artifact/'${{ needs.setup.outputs.archive-filename }}' --zstd --verbose

      - name: Install Bun
        if: startsWith(matrix.package-manager, 'bun@')
        shell: bash
        run: |
          npm install --global --force '${{ matrix.package-manager }}'
          if [[ '${{ runner.os }}' == 'Windows' ]]; then
            # Windows installs global packages to a directory that has lower priority than the default node install so we also need to edit $PATH
            # see https://github.com/vercel/turbo/pull/1632/files#diff-b92a3120126a9ffe46d7d5ec3a8496ef1eac951db09e1972fac7c78438e36c42R69
            npm config get prefix >> "${GITHUB_PATH}"
          fi

      - name: Enable Corepack (Automatically setup a package manager for Node.js)
        if: |
          ! startsWith(matrix.package-manager, 'bun@')
        shell: bash
        run: |
          if type yarn >/dev/null 2>&1; then
            echo '[command]npm uninstall --global yarn'
            npm uninstall --global yarn
          fi
          if type pnpm >/dev/null 2>&1; then
            echo '[command]npm uninstall --global pnpm'
            npm uninstall --global pnpm
          fi
          corepack enable
          corepack enable npm
          < ./package.json jq '.packageManager = "${{ matrix.package-manager }}"' > ./package.json~new
          mv ./package.json~new ./package.json

      - name: Run install
        uses: actions/github-script@v6
        env:
          RUNNER_TEMP_DIR: ${{ runner.temp }}
          TARBALL_PATH: ./${{ needs.setup.outputs.tarball-name }}
        with:
          script: |
            const script = require('./.github/workflows/run-install.cjs');
            return await script({
              github,
              context,
              core,
              glob,
              io,
              exec,
              fetch,
              require,
              __original_require__,
              packageManager: '${{ matrix.package-manager }}',
              workspaceDirname: '${{ needs.setup.outputs.workspace-dirname }}',
            });

  # Successfully complete this job when all jobs have been completed.
  # Only by checking this job, it is possible to determine if CI is complete or not.
  # So we can simplify our GitHub status check configuration.
  # see https://github.com/orgs/community/discussions/26822
  # see https://github.com/sounisi5011/npm-packages/blob/2a5ca2de696eeb8b40a38de90580441c4c6c96e0/.github/workflows/ci.yaml#L482-L498
  complete:
    name: Complete Workflow
    needs: debug-postinstall-script
    if:
      always() && github.event.pull_request
      # This job is required only for Pull Requests.
      # It does not need to be run on other branches.
    runs-on: ubuntu-latest
    steps:
      - name: Check all job status
        # see https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context
        # see https://docs.github.com/en/actions/learn-github-actions/expressions#contains
        if: |
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'cancelled')
          || contains(needs.*.result, 'skipped')
        run: exit 1
